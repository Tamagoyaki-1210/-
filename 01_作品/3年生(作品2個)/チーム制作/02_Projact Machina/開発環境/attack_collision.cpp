//=============================================================================
//
// 武器攻撃.cpp (attack_collision.cpp)
// Author : Tanimoto Kosuke
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "application.h"
#include "renderer.h"
#include "attack_collision.h"
#include "game.h"
#include "object3D.h"
#include "tutorial.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CAttack_Collision::CAttack_Collision(const CObject::PRIORITY priority) : CMove_Object(priority)
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CAttack_Collision::~CAttack_Collision()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CAttack_Collision::Init()
{
	// タグの設定
	SetTag(TAG_ATTACK);

	// 当たり判定のタイプ
	SetCollision_Type(CMove_Object::COLLISION_TYPE_SHERER);

	// サイズの設定
	CMove_Object::SetSize({ GetRadius(),GetRadius(),GetRadius() });

	// オブジェクト3Dの初期化処理
	CMove_Object::Init();

	//==================================================
	// メンバ変数の初期化
	//==================================================
	// 当たり判定の生成
	SetCollision();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CAttack_Collision::Uninit()
{
	// 3Dオブジェクトが使用されている場合
	if (m_pObj3D != nullptr)
	{
		m_pObj3D->Uninit();
		m_pObj3D = nullptr;
	}

	// オブジェクト3Dの終了処理
	CMove_Object::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CAttack_Collision::Update()
{
	CMove_Object::Update();

	// 取得
	D3DXVECTOR3 pos = GetPos();
	float radius = GetRadius();

	//前回の位置を保存
	m_nPosOld = pos;

	SetPosOld(m_nPosOld);

	// 位置の設定
	SetPos(pos);

	// オブジェクト3Dの位置を設定
	if (m_pObj3D != nullptr)
	{
		m_pObj3D->SetPos(pos);
		m_pObj3D->SetSize({ radius, radius });
	}

	// 寿命を減らす
	m_nLife--;
	if (m_nLife <= 0)
	{
		Uninit();
		return;
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CAttack_Collision::Draw()
{

}

//=============================================================================
// 被弾処理
//=============================================================================
void CAttack_Collision::Hit(CMove_Object* pHit)
{
	//// 弾では無い場合 && 同じサイドではない場合
	//if ((pHit->GetTag() == TAG_CHARACTER && GetPlayerSide() != pHit->GetPlayerSide())
	//	|| pHit->GetTag() == TAG_MAP_OBJECT)
	//{
	//	Destroy();
	//}
}

//=============================================================================
// 破壊処理
//=============================================================================
void CAttack_Collision::Destroy()
{
	Uninit();
}