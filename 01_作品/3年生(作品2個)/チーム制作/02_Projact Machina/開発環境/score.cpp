//=============================================================================
//
// score.cpp (スコア.cpp)
// Author : Saito Shian
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "application.h"
#include "renderer.h"
#include "score.h"
#include "number.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CScore::CScore()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CScore::~CScore()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CScore::Init()
{
	//==================================================
	// メンバ変数の初期化
	//==================================================
	m_nScore = 0;
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_apNumber[nCnt] = nullptr;
	}

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		//ナンバーの生成
		m_apNumber[nCnt] = CNumber::Create(D3DXVECTOR3(m_pos.x + 30.0f * nCnt, m_pos.y, 0.0f), 20.0f, 30.0f, CObject::PRIORITY_SCREEN);
		//分割数,何番目か
		m_apNumber[nCnt]->SetTexPos(0.0f, 1.0f, 0.1f * m_aPosTexU[nCnt] + 0.1f, m_aPosTexU[nCnt] * 0.1f);
	}

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CScore::Uninit()
{
	// メンバ変数の終了処理
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt] != nullptr)
		{
			m_apNumber[nCnt]->Uninit();
		}

		m_apNumber[nCnt] = nullptr;
	}

	// リリース処理
	CObject::Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CScore::Update()
{
	
}

//=============================================================================
// 描画処理
//=============================================================================
void CScore::Draw()
{
	
}

//============================================
// スコアの設定処理
//============================================
void CScore::SetScore(__int64 nScore)
{
	m_nScore = nScore;

	m_aPosTexU[0] = m_nScore % 10000000000 / 10000000000;
	m_aPosTexU[1] = m_nScore % 1000000000 / 1000000000;
	m_aPosTexU[2] = m_nScore % 100000000 / 10000000;
	m_aPosTexU[3] = m_nScore % 10000000 / 1000000;
	m_aPosTexU[4] = m_nScore % 1000000 / 100000;
	m_aPosTexU[5] = m_nScore % 100000 / 10000;
	m_aPosTexU[6] = m_nScore % 10000 / 1000;
	m_aPosTexU[7] = m_nScore % 1000 / 100;
	m_aPosTexU[8] = m_nScore % 100 / 10;
	m_aPosTexU[9] = m_nScore % 10 / 1;

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		//分割数,何番目か
		m_apNumber[nCnt]->SetTexPos(0.0f, 1.0f, 0.1f * m_aPosTexU[nCnt] + 0.1f, m_aPosTexU[nCnt] * 0.1f);
	}
}

//============================================
// スコアの加算処理
//============================================
void CScore::AddScore(__int64 nValue)
{
	//メンバ変数にスコアを加算
	SetScore(m_nScore + nValue);
}

//=============================================================================
// 生成処理
//=============================================================================
CScore* CScore::Create(D3DXVECTOR3 pos)
{
	//クラスの生成
	CScore* pScore = new CScore;

	//nullチェック
	if (pScore != nullptr)
	{

		pScore->SetPos(pos);
		//初期化処理
		pScore->Init();
	}
	else
	{
		assert(false);
	}

	return pScore;
}

