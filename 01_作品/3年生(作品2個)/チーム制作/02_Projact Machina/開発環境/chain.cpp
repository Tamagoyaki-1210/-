//==============================================================================================
//
// 鎖	　　chain.cpp
// Author : tutida ryousei
//
//==============================================================================================
#include"chain.h"
#include"chain_manager.h"
#include"restraint_switch.h"

//==============================================================================================
// コンストラクタ
//==============================================================================================
CChain::CChain(const PRIORITY priority) : CObject3D(priority)
{
}

//==============================================================================================
// デストラクタ
//==============================================================================================
CChain::~CChain()
{
}

//==============================================================================================
// 初期化処理
//==============================================================================================
HRESULT CChain::Init()
{
	CObject3D::Init();

	SetSize({0, (float)CChain_Manager::CHAIN_SIZE_Y });

	return S_OK;
}

//==============================================================================================
// 終了処理
//==============================================================================================
void CChain::Uninit()
{
	CObject3D::Uninit();
}

//==============================================================================================
// 更新処理
//==============================================================================================
void CChain::Update()
{
	CObject3D::Update();

	D3DXVECTOR3 VtxPos[CRestraint_Switch::SWITHC_NUM] = {};
	for (int nCnt = 0; nCnt < CRestraint_Switch::SWITHC_NUM; nCnt++)
	{
		VtxPos[nCnt] = GetVtxPos(nCnt);
	}
	VtxBuffUnlock();

	if (m_nIndex == 0)
	{
		SetVtxPos(m_Vec + VtxPos[1], 1);
		SetVtxPos(m_Vec + VtxPos[3], 3);
	}
	else
	{
		SetVtxPos(m_Vec + VtxPos[0], 0);
		SetVtxPos(m_Vec + VtxPos[2], 2);
	}
}

//==============================================================================================
// 描画処理
//==============================================================================================
void CChain::Draw()
{
	CObject3D::Draw();
}

//==============================================================================================
// 生成処理
//==============================================================================================
CChain *CChain::Create(D3DXVECTOR3 pos, D3DXVECTOR3 vec, int index)
{
	CChain *pChain = new CChain(CObject::PRIORITY_BACK);

	if (pChain != nullptr)
	{
		pChain->SetPos(pos);
		pChain->m_Vec = vec;
		pChain->m_nIndex = index;
		pChain->Init();
		pChain->SetTexture(CTexture::TEXTURE_CHAIN);
	}

	return pChain;
}