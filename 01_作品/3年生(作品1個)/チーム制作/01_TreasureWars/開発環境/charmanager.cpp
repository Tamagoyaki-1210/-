//==============================================================================================
//
// キャラクターの情報　　　charmanager.cpp
// tutida ryousei
//
//==============================================================================================
#include"game.h"
#include"charmanager.h"
#include"character.h"
#include"file.h"
#include"entry.h"

//==============================================================================================
// コンストラクタ
//==============================================================================================
CCharManager::CCharManager()
{
}

//==============================================================================================
// デストラクタ
//==============================================================================================
CCharManager::~CCharManager()
{
}

//==============================================================================================
// 初期化処理
//==============================================================================================
HRESULT CCharManager::Init()
{
	// 全てのキャラクターの初期化処理
	for (int nCnt = 0; nCnt < Max_Character; nCnt++)
	{
		m_pCharacter[nCnt] = nullptr;
	}

	return S_OK;
}

//==============================================================================================
// 終了処理
//==============================================================================================
void CCharManager::Uninit()
{
	CharaReleaseAll();
}

//==============================================================================================
// 全てのキャラクターを終了させる処理
//==============================================================================================
void CCharManager::CharaReleaseAll()
{
	// 全てのキャラクターの終了処理
	for (int nCnt = 0; nCnt < Max_Character; nCnt++)
	{
		if (m_pCharacter[nCnt] != nullptr)
		{
			m_pCharacter[nCnt]->Uninit();
			m_pCharacter[nCnt] = nullptr;
		}
	}
}

//==============================================================================================
// キャラ設定処理
//==============================================================================================
CCharacter* CCharManager::EntryChara(const D3DXVECTOR3 pos, const Chara_Type type, const int index, int timetype)
{
	// キャラクターが使用中では無い場合
	if (m_pCharacter[index] == nullptr)
	{
		// エントリーしたキャラ
		m_pCharacter[index] = CFile::LoadCharFile(type, index, timetype);
		m_pCharacter[index]->SetPos(pos);

		// 生成したキャラクターのポインタを返す
		return m_pCharacter[index];
	}
	return nullptr;
}

//==============================================================================================
// 全てのキャラ設定処理
//==============================================================================================
void CCharManager::SetAllChara(int timetype)
{
	for (int nCnt = 0; nCnt < Max_Character; nCnt++)
	{
		// エントリーしたキャラ判定からプレイヤーかCPUを選んで生成する
		m_pCharacter[nCnt] = CFile::LoadCharFile(CEntry::GetEntry(nCnt) ? TYPE_PLAYER : TYPE_CPU, nCnt, timetype);
	}
}

//==============================================================================================
// デストラクタ
//==============================================================================================
CCharManager* CCharManager::Create()
{
	CCharManager* pCharManager = new CCharManager;

	if (FAILED(pCharManager->Init()))
	{
		return nullptr;
	}

	return pCharManager;
}